const canvas=document.getElementById("game");
const ctx=canvas.getContext("2d");
const scoreEl=document.getElementById("score");
const livesEl=document.getElementById("lives");
const levelEl=document.getElementById("level");
const statusBanner=document.getElementById("status-banner");
const modal=document.getElementById("power-modal");
const cellSize=32;
const cols=Math.floor(canvas.width/cellSize);
const rows=Math.floor(canvas.height/cellSize);
const keys={};
const player={x:canvas.width/2-cellSize/2,y:canvas.height-cellSize*2,width:cellSize,height:cellSize,baseSpeed:320,baseShootCooldown:320,speed:320,shootCooldown:320,lastShot:0,lives:3,score:0,invulnerable:0,shields:0};
let bullets=[];
let mushrooms=[];
let centipedes=[];
let powerUps=[];
let particles=[];
let state="menu";
let lastTime=0;
let level=1;
let baseCentipedeInterval=0.36;
let centipedeTimer=0;
let modalTimer=0;
const effectState={rapidFire:{instances:[]},shield:{instances:[]},slowField:{instances:[]},spreadShot:{instances:[]},piercingShot:{instances:[]},doublePoints:{instances:[]},speedBoost:{instances:[]},freeze:{instances:[]}};
const powerUpLibrary={rapidFire:{id:"rapidFire",name:"Rapid Fire",color:"#f8ff5f",duration:8,description:"Blaster cooldown reduced.",collect(){return addTimedEffect("rapidFire",8)}},shield:{id:"shield",name:"Plasma Shield",color:"#5fffd5",duration:12,description:"Absorbs incoming damage.",collect(){return addTimedEffect("shield",12)}},slowField:{id:"slowField",name:"Temporal Drag",color:"#7d6cff",duration:6,description:"Centipede pace slowed.",collect(){return addTimedEffect("slowField",6)}},spreadShot:{id:"spreadShot",name:"Spread Shot",color:"#ff8c6c",duration:8,description:"Triple neon bolts.",collect(){return addTimedEffect("spreadShot",8)}},piercingShot:{id:"piercingShot",name:"Phase Bolts",color:"#9ffbff",duration:10,description:"Bolts pierce enemies.",collect(){return addTimedEffect("piercingShot",10)}},doublePoints:{id:"doublePoints",name:"Score Surge",color:"#ffe066",duration:12,description:"Double score gains.",collect(){return addTimedEffect("doublePoints",12)}},speedBoost:{id:"speedBoost",name:"Velocity Boost",color:"#66ffb1",duration:8,description:"Player speed increased.",collect(){return addTimedEffect("speedBoost",8)}},freeze:{id:"freeze",name:"Chrono Freeze",color:"#66aaff",duration:4,description:"Centipede frozen in time.",collect(){return addTimedEffect("freeze",4)}},extraLife:{id:"extraLife",name:"Extra Life",color:"#ff5f8d",duration:0,description:"Gain a bonus life.",collect(){player.lives+=1;updateHud();return 0}},bomb:{id:"bomb",name:"Nova Bomb",color:"#ff3dff",duration:0,description:"Detonates nearby threats.",collect(){triggerBomb();return 0}}};
const powerUpKeys=Object.keys(powerUpLibrary);
const mushroomMap=new Map();
function startGame(){resetGame();state="playing";statusBanner.textContent="";}
function resetGame(){player.x=canvas.width/2-player.width/2;player.y=canvas.height-cellSize*2;player.score=0;player.lives=3;player.invulnerable=0;player.lastShot=0;level=1;baseCentipedeInterval=0.36;centipedeTimer=0;bullets=[];mushrooms=[];centipedes=[];powerUps=[];particles=[];for(const key in effectState)effectState[key].instances=[];mushroomMap.clear();spawnMushrooms(32);spawnCentipede(12);updateHud();}
function spawnMushrooms(count){let attempts=0;while(count>0&&attempts<400){attempts++;const x=Math.floor(Math.random()*cols);const y=Math.floor(Math.random()*(rows-6))+1;const key=x+","+y;if(y>=rows-4)continue;if(mushroomMap.has(key))continue;mushrooms.push({x,y,hp:4,pulse:Math.random()*Math.PI*2});mushroomMap.set(key,mushrooms.length-1);count--;}}
function spawnCentipede(length){const segments=[];const startX=Math.max(0,Math.floor((cols-length)/2));for(let i=0;i<length;i++){const offset=startX+i;const sx=((offset%cols)+cols)%cols;const sy=Math.floor(offset/cols);segments.push({x:sx,y:sy});}
centipedes.push({segments,direction:1});}
function update(time){const delta=(time-lastTime)/1000||0;lastTime=time;refreshEffects(time);if(state==="playing")updateGame(delta,time);render();requestAnimationFrame(update);}
function updateGame(delta,time){handleInput(delta,time);updateBullets(delta);updateCentipedes(delta,time);updatePowerUps(delta,time);updateMushrooms(delta);updateParticles(delta);checkPlayerCollisions();if(modalTimer>0){modalTimer-=delta;if(modalTimer<=0){modal.classList.remove("show");modal.classList.add("hidden");}}}
function handleInput(delta,time){let move=0;if(keys.ArrowLeft||keys.KeyA)move-=1;if(keys.ArrowRight||keys.KeyD)move+=1;let vertical=0;if(keys.ArrowUp||keys.KeyW)vertical-=1;if(keys.ArrowDown||keys.KeyS)vertical+=1;const speedBoostStacks=getStacks("speedBoost");player.speed=player.baseSpeed*(1+0.35*speedBoostStacks);player.x+=move*player.speed*delta;const topLimit=canvas.height-cellSize*5;player.y+=vertical*player.speed*0.6*delta;if(player.y<topLimit)player.y=topLimit;if(player.y>canvas.height-player.height)player.y=canvas.height-player.height;if(player.x<0)player.x=0;if(player.x>canvas.width-player.width)player.x=canvas.width-player.width;resolveMushroomCollision();const rapidStacks=getStacks("rapidFire");player.shootCooldown=player.baseShootCooldown*Math.pow(0.72,rapidStacks);if((keys.Space||keys.KeyW||keys.ArrowUp)&&time-player.lastShot>player.shootCooldown){fireBullet(time);}}
function resolveMushroomCollision(){for(const mushroom of mushrooms){const mx=mushroom.x*cellSize;const my=mushroom.y*cellSize;const rect={x:mx,y:my,width:cellSize,height:cellSize};if(rectsOverlap(player,rect)){if(player.x+player.width/2<rect.x+rect.width/2)player.x=rect.x-player.width;else player.x=rect.x+rect.width;}}
if(player.x<0)player.x=0;if(player.x>canvas.width-player.width)player.x=canvas.width-player.width;}
function fireBullet(time){player.lastShot=time;const spreadStacks=getStacks("spreadShot");const piercingStacks=getStacks("piercingShot");const bolts=spreadStacks>0?3:1;const angles=[];if(bolts===1){angles.push(0);}else{angles.push(-0.15,0,0.15);}for(const angle of angles){bullets.push({x:player.x+player.width/2,y:player.y,vy:-640,angle,life:2,pierce:piercingStacks+1,width:6,height:14});}}
function updateBullets(delta){for(const bullet of bullets){bullet.x+=Math.sin(bullet.angle)*280*delta;bullet.y+=bullet.vy*delta;bullet.life-=delta;}bullets=bullets.filter(b=>b.y>-50&&b.life>0);for(const bullet of bullets){handleBulletCollisions(bullet);}bullets=bullets.filter(b=>!b.remove);}
function handleBulletCollisions(bullet){const bulletRect={x:bullet.x-3,y:bullet.y-10,width:6,height:14};for(const power of powerUps){if(circleRectCollision({x:power.x,y:power.y,radius:power.radius},bulletRect)){collectPowerUp(power);bullet.remove=true;return;}}
for(const mushroom of mushrooms){const rect={x:mushroom.x*cellSize,y:mushroom.y*cellSize,width:cellSize,height:cellSize};if(rectsOverlap(bulletRect,rect)){mushroom.hp-=1;bullet.remove=true;if(mushroom.hp<=0){destroyMushroom(mushroom);player.score+=2*scoreMultiplier();maybeSpawnPowerUp(mushroom.x*cellSize+cellSize/2,mushroom.y*cellSize+cellSize/2,0.15);}updateHud();return;}}
for(const centipede of centipedes){for(let i=0;i<centipede.segments.length;i++){const segment=centipede.segments[i];const rect={x:segment.x*cellSize,y:segment.y*cellSize,width:cellSize,height:cellSize};if(rectsOverlap(bulletRect,rect)){damageCentipede(centipede,i);player.score+=10*scoreMultiplier();updateHud();if(bullet.pierce>1){bullet.pierce-=1;}else{bullet.remove=true;}return;}}}}
function destroyMushroom(mushroom){const key=mushroom.x+","+mushroom.y;mushroomMap.delete(key);const index=mushrooms.indexOf(mushroom);if(index>-1)mushrooms.splice(index,1);mushroomMap.clear();for(let i=0;i<mushrooms.length;i++){mushroomMap.set(mushrooms[i].x+","+mushrooms[i].y,i);}}
function damageCentipede(centipede,index){const tail=centipede.segments.splice(index);const removed=tail.shift();createMushroomFromSegment(removed);maybeSpawnPowerUp(removed.x*cellSize+cellSize/2,removed.y*cellSize+cellSize/2,0.3);if(tail.length>0){centipedes.push({segments:tail,direction:-centipede.direction});}if(centipede.segments.length===0){const idx=centipedes.indexOf(centipede);if(idx>-1)centipedes.splice(idx,1);}if(centipedes.length===0)advanceLevel();}
function createMushroomFromSegment(segment){const key=segment.x+","+segment.y;if(!mushroomMap.has(key)){const mushroom={x:segment.x,y:segment.y,hp:4,pulse:Math.random()*Math.PI*2};mushrooms.push(mushroom);mushroomMap.set(key,mushrooms.length-1);}}
function updateCentipedes(delta,time){const freezeStacks=getStacks("freeze");if(freezeStacks>0)return;centipedeTimer+=delta;const slowStacks=getStacks("slowField");const interval=Math.max(0.08,baseCentipedeInterval/(1+0.05*(level-1)))*(1+0.4*slowStacks);if(centipedeTimer<interval)return;centipedeTimer=0;for(const centipede of centipedes){moveCentipede(centipede);}}
function moveCentipede(centipede){const positions=centipede.segments.map(seg=>({x:seg.x,y:seg.y}));let head=centipede.segments[0];let targetX=head.x+centipede.direction;let targetY=head.y;if(targetX<0||targetX>=cols||mushroomMap.has(targetX+","+targetY)){targetX=head.x;targetY=head.y+1;centipede.direction*=-1;}head.x=targetX;head.y=targetY;if(head.y>=rows){head.y=rows-1;handlePlayerHit();return;}for(let i=1;i<centipede.segments.length;i++){centipede.segments[i].x=positions[i-1].x;centipede.segments[i].y=positions[i-1].y;}}
function updatePowerUps(delta,time){for(const power of powerUps){power.phase+=delta*4;power.y+=Math.sin(power.phase)*4*delta;}
for(const power of powerUps){if(circleRectCollision({x:power.x,y:power.y,radius:power.radius},player)){collectPowerUp(power);}}
powerUps=powerUps.filter(p=>!p.remove);
player.invulnerable=Math.max(0,player.invulnerable-delta);
player.shields=getStacks("shield");}
function updateMushrooms(delta){for(const mushroom of mushrooms)mushroom.pulse+=delta*2;}
function updateParticles(delta){for(const particle of particles){particle.x+=particle.vx*delta;particle.y+=particle.vy*delta;particle.life-=delta;}particles=particles.filter(p=>p.life>0);}
function checkPlayerCollisions(){const playerRect={x:player.x,y:player.y,width:player.width,height:player.height};for(const centipede of centipedes){for(const segment of centipede.segments){const rect={x:segment.x*cellSize,y:segment.y*cellSize,width:cellSize,height:cellSize};if(rectsOverlap(playerRect,rect)){handlePlayerHit();return;}}}}
function handlePlayerHit(){if(player.invulnerable>0)return;if(player.shields>0){consumeShield();player.invulnerable=2;showPowerModal("Shield Absorbed the Hit");return;}player.lives-=1;updateHud();if(player.lives<=0){state="gameover";statusBanner.textContent="Game Over - Press Enter";return;}player.x=canvas.width/2-player.width/2;player.y=canvas.height-cellSize*2;player.invulnerable=2;resetCentipedesAfterLife();}
function resetCentipedesAfterLife(){if(state!=="playing")return;centipedes=[];spawnCentipede(Math.min(24,12+level*2));}
function consumeShield(){const effect=effectState.shield;effect.instances.sort((a,b)=>a-b);effect.instances.shift();player.shields=getStacks("shield");}
function advanceLevel(){level+=1;baseCentipedeInterval=Math.max(0.12,baseCentipedeInterval*0.9);centipedeTimer=0;spawnMushrooms(6+level*2);spawnCentipede(12+level*2);statusBanner.textContent="Level "+level;setTimeout(()=>{if(state==="playing")statusBanner.textContent="";},1200);updateHud();}
function maybeSpawnPowerUp(x,y,prob){if(Math.random()<prob){const key=powerUpKeys[Math.floor(Math.random()*powerUpKeys.length)];const def=powerUpLibrary[key];powerUps.push({x,y,type:def.id,color:def.color,phase:Math.random()*Math.PI*2,radius:18,remove:false});}}
function collectPowerUp(power){const def=powerUpLibrary[power.type];const stacks=def.collect();power.remove=true;showPowerModal(def.name+": "+def.description+(stacks>1?" x"+stacks:""));}
function addTimedEffect(type,duration){const effect=effectState[type];const now=performance.now();effect.instances=effect.instances.filter(t=>t>now);effect.instances.push(now+duration*1000);return effect.instances.length;}
function getStacks(type){const effect=effectState[type];if(!effect)return 0;const now=performance.now();effect.instances=effect.instances.filter(t=>t>now);return effect.instances.length;}
function refreshEffects(time){for(const key in effectState){effectState[key].instances=effectState[key].instances.filter(exp=>exp>time);}player.shields=getStacks("shield");}
function triggerBomb(){const radius=cellSize*5;const originX=player.x+player.width/2;const originY=player.y;for(let i=mushrooms.length-1;i>=0;i--){const mushroom=mushrooms[i];const cx=mushroom.x*cellSize+cellSize/2;const cy=mushroom.y*cellSize+cellSize/2;const dist=Math.hypot(cx-originX,cy-originY);if(dist<=radius){destroyMushroom(mushroom);player.score+=2*scoreMultiplier();}}for(const centipede of [...centipedes]){for(let i=centipede.segments.length-1;i>=0;i--){const seg=centipede.segments[i];const cx=seg.x*cellSize+cellSize/2;const cy=seg.y*cellSize+cellSize/2;const dist=Math.hypot(cx-originX,cy-originY);if(dist<=radius){damageCentipede(centipede,i);player.score+=8*scoreMultiplier();}}}
spawnParticles(originX,originY,radius);updateHud();}
function spawnParticles(x,y,radius){for(let i=0;i<40;i++){const angle=Math.random()*Math.PI*2;const speed=120+Math.random()*200;particles.push({x,y,vx:Math.cos(angle)*speed,vy:Math.sin(angle)*speed,life:0.6,color:i%2?"#ff3dff":"#66fffb"});}}
function scoreMultiplier(){const stacks=getStacks("doublePoints");return 1+stacks;}
function updateHud(){scoreEl.textContent=Math.floor(player.score);livesEl.textContent=player.lives;levelEl.textContent=level;}
function render(){ctx.clearRect(0,0,canvas.width,canvas.height);drawBackdrop();drawMushrooms();drawPowerUps();drawCentipedes();drawBullets();drawPlayer();drawParticles();}
function drawBackdrop(){const gradient=ctx.createLinearGradient(0,0,0,canvas.height);gradient.addColorStop(0,"rgba(0,20,40,0.6)");gradient.addColorStop(1,"rgba(0,0,0,0.4)");ctx.fillStyle=gradient;ctx.fillRect(0,0,canvas.width,canvas.height);ctx.strokeStyle="rgba(0,255,255,0.06)";ctx.lineWidth=1;for(let x=0;x<=canvas.width;x+=cellSize){ctx.beginPath();ctx.moveTo(x,0);ctx.lineTo(x,canvas.height);ctx.stroke();}for(let y=0;y<=canvas.height;y+=cellSize){ctx.beginPath();ctx.moveTo(0,y);ctx.lineTo(canvas.width,y);ctx.stroke();}}
function drawMushrooms(){for(const mushroom of mushrooms){const x=mushroom.x*cellSize;const y=mushroom.y*cellSize;const pulse=(Math.sin(mushroom.pulse)+1)/2;const gradient=ctx.createRadialGradient(x+cellSize/2,y+cellSize/2,4,x+cellSize/2,y+cellSize/2,cellSize/2);gradient.addColorStop(0,"rgba(255,90,180,0.9)");gradient.addColorStop(1,"rgba(100,0,120,0.7)");ctx.fillStyle=gradient;ctx.fillRect(x+4,y+4,cellSize-8,cellSize-8);ctx.strokeStyle=`rgba(255,180,255,${0.4+0.3*pulse})`;ctx.lineWidth=3;ctx.strokeRect(x+4,y+4,cellSize-8,cellSize-8);}}
function drawCentipedes(){for(const centipede of centipedes){for(let i=0;i<centipede.segments.length;i++){const segment=centipede.segments[i];const x=segment.x*cellSize+cellSize/2;const y=segment.y*cellSize+cellSize/2;const radius=cellSize/2.4;const gradient=ctx.createRadialGradient(x,y,4,x,y,radius);gradient.addColorStop(0,i===0?"#fffd80":"#7bfffd");gradient.addColorStop(1,i===0?"#ff2dfd":"#0066ff");ctx.fillStyle=gradient;ctx.beginPath();ctx.arc(x,y,radius,0,Math.PI*2);ctx.fill();ctx.strokeStyle="rgba(255,255,255,0.3)";ctx.lineWidth=2;ctx.stroke();}}
function drawPowerUps(){for(const power of powerUps){const radius=power.radius*(0.8+0.2*Math.sin(power.phase*2));const gradient=ctx.createRadialGradient(power.x,power.y,4,power.x,power.y,radius);gradient.addColorStop(0,"#ffffff");gradient.addColorStop(1,power.color);ctx.fillStyle=gradient;ctx.beginPath();ctx.arc(power.x,power.y,radius,0,Math.PI*2);ctx.fill();ctx.strokeStyle="rgba(255,255,255,0.6)";ctx.lineWidth=2;ctx.stroke();}}
function drawBullets(){for(const bullet of bullets){ctx.save();ctx.translate(bullet.x,bullet.y);ctx.rotate(bullet.angle);const gradient=ctx.createLinearGradient(0,-12,0,12);gradient.addColorStop(0,"#fffba0");gradient.addColorStop(1,"#ff00ff");ctx.fillStyle=gradient;ctx.fillRect(-3,-14,6,20);ctx.shadowBlur=12;ctx.shadowColor="#ff8cff";ctx.restore();}}
function drawPlayer(){ctx.save();ctx.translate(player.x+player.width/2,player.y+player.height/2);const invulFlash=player.invulnerable>0?0.4+0.6*Math.sin(performance.now()/80):0;ctx.shadowBlur=20;ctx.shadowColor=player.shields>0?"#5fffd5":"#00f6ff";const gradient=ctx.createRadialGradient(0,0,6,0,0,cellSize/1.6);gradient.addColorStop(0,player.shields>0?"#d7fff7":"#8ff9ff");gradient.addColorStop(1,player.shields>0?"#1affb9":"#006bff");ctx.fillStyle=gradient;ctx.beginPath();ctx.ellipse(0,0,cellSize/2,cellSize/2.4,0,0,Math.PI*2);ctx.fill();if(player.shields>0){ctx.strokeStyle=`rgba(95,255,213,${0.6+0.3*invulFlash})`;ctx.lineWidth=4;ctx.beginPath();ctx.arc(0,0,cellSize/1.5,0,Math.PI*2);ctx.stroke();}
ctx.restore();}
function drawParticles(){ctx.save();ctx.globalCompositeOperation="lighter";for(const particle of particles){ctx.fillStyle=particle.color;ctx.globalAlpha=Math.max(0,particle.life/0.6);ctx.beginPath();ctx.arc(particle.x,particle.y,4,0,Math.PI*2);ctx.fill();}
ctx.restore();}
function circleRectCollision(circle,rect){const closestX=Math.max(rect.x,Math.min(circle.x,rect.x+rect.width));const closestY=Math.max(rect.y,Math.min(circle.y,rect.y+rect.height));const dx=circle.x-closestX;const dy=circle.y-closestY;return dx*dx+dy*dy<=circle.radius*circle.radius;}
function rectsOverlap(a,b){return a.x<b.x+b.width&&a.x+a.width>b.x&&a.y<b.y+b.height&&a.y+a.height>b.y;}
function showPowerModal(text){modal.textContent=text;modal.classList.remove("hidden");modal.classList.add("show");modalTimer=2.5;}
document.addEventListener("keydown",e=>{if(!keys[e.code])keys[e.code]=true;if(["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Space"].includes(e.code))e.preventDefault();if(e.code==="Enter"){if(state==="menu"||state==="gameover"){startGame();}}if(e.code==="KeyP"&&state==="playing"){state="paused";statusBanner.textContent="Paused";}else if(e.code==="KeyP"&&state==="paused"){state="playing";statusBanner.textContent="";}});
document.addEventListener("keyup",e=>{keys[e.code]=false;if(["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Space"].includes(e.code))e.preventDefault();});
requestAnimationFrame(update);
